import pandas as pd
import numpy as np
from Reward_QoE1 import NN_training ,reward_QoE
# -*- coding: utf-8 -*-   
      
import os  
# bw=
# [4.39948  0.596997 4.75848  7.55747  3.81298  3.45349  4.19998  0.512998
#  1.23449  2.54299  2.57399  7.67097  4.76248  2.72249  4.76148  4.75748
#  2.53099  4.60298  7.78897  0.685497 0.864496 7.67697  6.09347  0.586997
#  4.37048  7.61947  0.555998 6.84697  3.96548  4.62648 ]
# delay=
# [31774.4 71524.1 43705.5 10891.5 29339.6 29319.1 30774.6 61349.2 71945.4
#  44602.5 44507.2 10481.8 43884.8 46164.7 42867.3 45525.9 46285.4 37079.1
#  10839.8 68779.7 68358.5 10463.8 19352.2 71270.3 29030.2 23816.1 70696.6
#  18099.4 41863.9 32596.1]
# loss=
# [0.468451  0.929912  0.371955  0.0       0.59223   0.616749  0.470664
#  0.938836  0.861029  0.730013  0.726262  0.0       0.389311  0.712705
#  0.385057  0.434906  0.725687  0.501627  0.0      0.928797  0.910709
#  0.0        0.225174  0.938059  0.440299  0.0103292 0.941195  0.129959
#  0.585036  0.493854 ]
model, data_mean, data_std = NN_training()

band=[26.502,  45.8465, 34.4997, 33.9752, 28.7857, 33.3091, 40.4223 ,36.8153, 34.1805,45.3125]

for i in range(len(band)):
    band[i] -=20
band= [32.705488100647926]

delay=[38633.3, 12644.3, 11951.0 , 10864.6 ,39312.6, 11474.5 ,12201.8 ,12151.4 ,10509.2
 ,11154.1]
jitter=[17750.5, 16856.5, 16048.1 ,13911.3, 18197.0,  15727.5, 16411.8, 16707.3 ,12396.2,
 15377.7]

loss =[0.368091 ,0.0,      0.0,      0.0,      0.336583, 0.0,       0.0,       0.0,0.0, 0.0   ]
delay= [12578.97]
loss= [0.0]
jitter=[15520.09]
while True:
    b = input('put band :')
    if b == 'quit':
        break
    b = float(b)
    band =[]
    band.append(b)

    b = input('put delay :')
    if b == 'quit':
        break
    b = float(b)
    delay = []
    delay.append(b)

    b = input('put jitter :')
    if b == 'quit':
        break
    b = float(b)
    jitter = []
    jitter.append(b)

    b = input('put loss :')
    if b == 'quit':
        break
    b = float(b)
    loss = []
    loss.append(b)


    jitter = np.asarray(jitter)
    loss = np.asarray(loss)
    delay = np.asarray(delay)
    band = np.asarray(band)
    reward = reward_QoE (band,delay,jitter,loss, model, data_mean, data_std)
    print(reward)
    
# print(band)
# jitter = [14268.2,14591.2,19996.9,15512.3,20365.9,19196.2,16054,21296.3,18972.5,14795.9,16325,19742.9,15699.1,16600.3,36723,35917.3,16231.8,13658.7,14084.6,18175.1,18790.1,19403.1,15059.4,23960.7,14074.1,12579.6,23019.1,16101.7,24157.4,13522,13612.3,20847.6,11021.6,13414.9,14296.2,14584.5,13000.4,13791.5,18332.8,12775,22165.5,17814.7,18802.9,14429.6,17567.1,13902.8,16883.7,16006.7,14234.6,13423.6
# ]

# loss = [0.126312,0,0.843514,0.600442,0.835192,0.818463,0.621281,0.869231,0.83715,0.449336,0.579459,0.873737,0.287234,0.643364,0.933196,0.934718,0.622624,0,0,0.654052,0.67441,0.822342,0.392115,0.856562,0.0266667,0.129124,0.854639,0.660742,0.870624,0.366858,0.349043,0.851188,0,0,0.419855,0.450312,0.00595681,0.418718,0.744312,0,0.796535,0.731942,0.664281,0.324851,0.490448,0,0.43837,0.529002,0.409396,0
# ]

# delay = [14082.4,1809.77,40292.6,19400.4,51981.6,52207.4,19351.4,32009.2,38672.4,10415.2,32659.9,31458.3,32609.4,28635.4,71377.3,71058.3,28660.5,2091.89,1074.09,33933.8,34006.5,34279.8,10472.7,59261.7,20495.1,11617.6,59023.7,34452.7,43386,25253.7,25263.4,40752.9,210.446,880.561,18709.7,18631.7,8696.98,10435.2,59877,1000.21,61429.8,59873.4,20627.9,34523.4,24373.8,1802.04,30048.1,30820.5,9767.65,1190.57
# ]

# band = [31.70800519,23.49332754,29.82206368,43.71377993,27.86024779,48.42990112,38.11608708,23.66409451,24.27518067,37.90860271,28.39826947,31.52919078,23.9743728,31.7348128,29.63623706,22.32651305,50.53027344,24.48621112,22.20013762,32.81331038,25.79893297,31.21627915,25.3879894,22.69989437,25.57949853,42.72477877,29.66236943,18.57310703,33.48284888,31.58815765,26.19747585,29.6140089,32.73208869,32.62325668,42.12163538,35.87337565,22.83285952,38.66921473,24.56614572,31.66889048,30.76142928,39.07518202,30.47136366,35.490284,23.80607009,31.621782,31.5644567,43.42999065,26.10060239,52.34033811]



